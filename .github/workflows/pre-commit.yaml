name: pre-commit

on:
  pull_request:
  push:
    branches: [main]

env:
  POETRY_VERSION: "1.5.1"
  PYTHON_VERSION: "3.11.4"
  NODEJS_VERSION: "20.5.1"
  RUST_VERSION: "1.71.1"
  PRE_COMMIT_VERSION: "3.3.3"

jobs:
  pre-commit:
    name: Check pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Tauri dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      - name: Set up Yarn cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}

          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}
      - name: Install Node dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install
      - name: Install webdriver dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install
          dir: "webdriver"
      - name: Install poetry
        run: |
          pipx install poetry==$POETRY_VERSION
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: poetry
      - name: Install dependencies
        run: |
          cd src-python && poetry install
      - name: Setup Python sidecar
        run: |
          cd src-python && poetry run make sidecar
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy
      - name: Install pre-commit
        run: |
          pipx install pre-commit==$PRE_COMMIT_VERSION
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-4|${{ env.pythonLocation }}
      - run: pre-commit run --show-diff-on-failure --color=always --all-files
