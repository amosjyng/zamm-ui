name: test

on:
  pull_request:
  push:
    branches: [main]

env:
  BUILD_IMAGE: ghcr.io/amosjyng/zamm:v0.0.0-build

jobs:
  prepare-image:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Dummy step"
    outputs:
      image: ${{ env.BUILD_IMAGE }}
  build:
    name: Build entire program
    runs-on: ubuntu-latest
    needs: prepare-image
    container:
      image: ${{ needs.prepare-image.outputs.image }}
      options: --user root
    env:
      HOME: /root
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.FONTS_PAT }}
          submodules: "recursive"
      - run: rustup toolchain list
      - run: ls -la /root/.rustup/toolchains
      - name: Build artifacts
        run: make build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: builds
          path: |
            src-python/dist/main
            src-svelte/.svelte-kit/
            src-svelte/build/
            src-tauri/binaries/zamm-python-x86_64-unknown-linux-gnu
            src-tauri/target/release/zamm
            src-tauri/target/release/zamm-python
          retention-days: 1
      - name: Upload final app
        uses: actions/upload-artifact@v3
        with:
          name: full-app
          path: |
            src-tauri/target/release/bundle/appimage/zamm_*.AppImage
            src-tauri/target/release/bundle/deb/zamm_*.deb
          retention-days: 1
    outputs:
      image: ${{ needs.prepare-image.outputs.image }}
  pre-commit:
    name: Check pre-commit hooks
    runs-on: ubuntu-latest
    needs: prepare-image
    container:
      image: ${{ needs.prepare-image.outputs.image }}
      options: --user root
    env:
      HOME: /root
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.FONTS_PAT }}
          submodules: "recursive"
      - run: pwd
      - run: pre-commit run --show-diff-on-failure --color=always --all-files
  python:
    name: Run Python tests
    runs-on: ubuntu-latest
    needs: build
    container:
      image: ${{ needs.build.outputs.image }}
      options: --user root
    env:
      HOME: /root
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.FONTS_PAT }}
          submodules: "recursive"
      - uses: actions/download-artifact@v3
        with:
          name: builds
      - name: Run Python Tests
        run: poetry run make test
        working-directory: src-python
  rust:
    name: Run Rust tests
    runs-on: ubuntu-latest
    needs: build
    container:
      image: ${{ needs.build.outputs.image }}
      options: --user root
    env:
      HOME: /root
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.FONTS_PAT }}
          submodules: "recursive"
      - uses: actions/download-artifact@v3
        with:
          name: builds
      - name: Run Rust Tests
        run: cargo test
        working-directory: src-tauri
  svelte:
    name: Run Svelte tests
    runs-on: ubuntu-latest
    needs: build
    container:
      image: ${{ needs.build.outputs.image }}
      options: --user root
    env:
      HOME: /root
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.FONTS_PAT }}
          submodules: "recursive"
      - uses: actions/download-artifact@v3
        with:
          name: builds
      - name: Run Svelte Tests
        run: |
          yarn workspace gui test
      - name: Upload final app
        if: always() # run even if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: storybook-screenshots
          path: |
            src-svelte/screenshots/testing/**/*.png
          retention-days: 1
  e2e:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    needs: build
    container:
      image: ${{ needs.build.outputs.image }}
      options: --user root
    env:
      HOME: /root
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.FONTS_PAT }}
          submodules: "recursive"
      - uses: actions/download-artifact@v3
        with:
          name: builds
      - name: Try creating directories
        run: |
          mkdir -p /home/runner/.local/share/zamm/
          chmod -R 777 /home/runner/.local/share/zamm/
          chmod +x src-tauri/target/release/zamm
          chmod +x src-tauri/target/release/zamm-python
      - name: Run headless WebdriverIO tests
        run: xvfb-run yarn e2e-test
      - name: Upload test screenshots as artifacts
        if: always() # run even if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: test-screenshots
          path: webdriver/screenshots/testing/**/*.png
