"""Test that greetings work."""

from __future__ import annotations

import json
from pathlib import Path
from typing import Any, Callable, Protocol, Type, TypeVar

from zamm.api import GreetArgs
from zamm.main import greet

T = TypeVar("T", bound="ApiArgs", covariant=True)
U = TypeVar("U", bound="ApiResponse", covariant=True)


class ApiArgs(Protocol[T]):
    """Stub for API arguments generated by quicktype."""

    @staticmethod
    def from_dict(obj: Any) -> T:
        """Create an instance of this class from a dict."""
        ...

    def to_dict(self) -> dict:
        """Return a JSON-serializable dict representation of this class."""
        ...


class ApiResponse(Protocol[U]):
    """Stub for API responses generated by quicktype."""

    @staticmethod
    def from_dict(obj: Any) -> U:
        """Create an instance of this class from a dict."""
        ...

    def to_dict(self) -> dict:
        """Return a JSON-serializable dict representation of this class."""
        ...


def read_json(filename: str) -> dict:
    """Read JSON dict from a file."""
    return json.loads(Path(filename).read_text())


def compare_io(
    file_prefix: str, args_type: Type[T], get_response: Callable[[T], U]
) -> None:
    """Compare input and output for generic commands."""
    args_file = f"{file_prefix}_args.json"
    response_file = f"{file_prefix}_response.json"
    args: T = args_type.from_dict(read_json(args_file))  # type: ignore
    response = get_response(args)
    assert response.to_dict() == read_json(response_file)


def compare_greet_io(file_prefix: str) -> None:
    """Compare input and output for the greet command."""
    compare_io(file_prefix, GreetArgs, greet)


def test_regular_greet() -> None:
    """Make sure a regular greeting works."""
    compare_greet_io("sample-calls/canonical/greet")


def test_empty_greet() -> None:
    """Make sure an empty greeting works."""
    compare_greet_io("sample-calls/alt/empty_greet")
